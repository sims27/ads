Algorithm of Shell Sort
Step 1: Initial Setup.
Initial Gap: Start with `gap = 2` (size of array / 2).
Compare elements with a gap of 2:
Compare `arr[2]` (54) and `arr[0]` (12): No swap needed.
Compare `arr[3]` (2) and `arr[1]` (34): Swap them → [12, 2, 54, 34, 3].
Compare `arr[4]` (3) and `arr[2]` (54): Swap them → [12, 2, 3, 34, 54].
The array after the first gap pass: [12, 2, 3, 34, 54].
Step 2: Gap Selection.
Next Gap: `gap = 1`.
Now, perform an insertion sort on the entire array:
Compare and shift 2: [2, 12, 3, 34, 54].
Compare and shift 3: [2, 3, 12, 34, 54].
Step 3: Gapped Insertion Sort
Step 4: Shifting Elements.
Step 5: Reduce the Gap.
Step 6: Final Pass
The array after the final pass: [2, 3, 12, 34, 54].

Programming Code in Java:
class ShellSort{
	public static void shellSort(int[] arr){
		int n=arr.length;
		for(int gap=n/2;gap>0;gap/=2){
			for(int i=gap;i<n;i++){
				int temp = arr[i];
				int j;
				for(j=i;j>=gap && arr[j - gap] > temp;j-=gap){
					arr[j]=arr[j-gap];
				}
				arr[j]=temp;
			}
		}
	}
	public static void printArray(int[] arr){
		for(int i:arr){
			System.out.println(i+" ");
		}
		System.out.println();
 
 
	}
	public static void main(String[] args){
		System.out.println("Name:Sahil Vyas");
		System.out.println("Roll No: MCA - 61");
		int[] arr={12,34,54,2,3};
		System.out.println("Original Array:");
		printArray(arr);
		shellSort(arr);
		System.out.println("Sorted Array: ");
		printArray(arr);
	}
}
