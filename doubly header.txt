// Node class representing each element in the doubly linked list
class Node {
    int data;
    Node next;
    Node prev;
    
    // Constructor to initialize a node with data
    public Node(int data) {
        this.data = data;
        this.next = null;
        this.prev = null;
    }
}

// DoublyEndedLinkedList class managing the doubly linked list
class DoublyEndedLinkedList {
    Node head;
    Node tail;
    
    // Constructor to initialize an empty list
    public DoublyEndedLinkedList() {
        head = null;
        tail = null;
    }
    
    // Method to insert a node at the beginning
    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = tail = newNode;
            // if the list is empty, head and tail point to the new node
        } else {
            newNode.next = head;
            head.prev = newNode;
            head = newNode; // Move head to point to the new node
        }
    }

    // Method to insert a node at the end
    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (tail == null) {
            head = tail = newNode;
            // if the list is empty, head and tail point to the new node
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode; // Move tail to point to the new node
        }
    }

    // Method to delete a node from the beginning
    public void deleteFromBeginning() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }
        if (head == tail) {
            // only one node in the list
            head = tail = null;
        } else {
            head = head.next;
            head.prev = null;
        }
    }

    // Method to delete a node from the end
    public void deleteFromEnd() {
        if (tail == null) {
            System.out.println("List is empty.");
            return;
        }
        if (head == tail) {
            // only one node in the list
            head = tail = null;
        } else {
            tail = tail.prev;
            tail.next = null;
        }
    }
    
    // Method to display the list from head to tail (forward traversal)
    public void displayForward() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    // Method to display the list from tail to head (backward traversal)
    public void displayBackward() {
        if (tail == null) {
            System.out.println("List is empty.");
            return;
        }
        Node current = tail;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.prev;
        }
        System.out.println();
    }

    // Method to search for an element in the list
    public boolean search(int data) {
        Node current = head;
        while (current != null) {
            if (current.data == data) {
                return true;
            }
            current = current.next;
        }
        return false;
    }
}

// Main class to test the DoublyEndedLinkedList functionality
class Main {
    public static void main(String[] args) {
	System.out.println("Sahil Vyas");
	System.out.println("MCA-61");
        // Create an instance of DoublyEndedLinkedList
        DoublyEndedLinkedList list = new DoublyEndedLinkedList();

        // Insert elements at the end of the list
        list.insertAtEnd(10);
        list.insertAtEnd(20);
        list.insertAtEnd(30);
        list.insertAtEnd(40);

        // Display the list from head to tail
        System.out.println("List after insertions (from head to tail):");
        list.displayForward();

        // Insert an element at the beginning
        list.insertAtBeginning(5);

        // Display the list from head to tail
        System.out.println("List after inserting 5 at the beginning (from head to tail):");
        list.displayForward();

        // Delete an element from the beginning
        list.deleteFromBeginning();
        System.out.println("List after deleting from the beginning (from head to tail):");
        list.displayForward();

        // Delete an element from the end
        list.deleteFromEnd();
        System.out.println("List after deleting from the end (from head to tail):");
        list.displayForward();

        // Search for an element
        boolean found = list.search(30);
        System.out.println("Is 30 in the list? " + (found ? "Yes" : "No"));

        // Display the list from tail to head (backward traversal)
        System.out.println("List displayed from tail to head:");
        list.displayBackward();

        // Final list display
        System.out.println("Final List (from head to tail):");
        list.displayForward();
    }
}





