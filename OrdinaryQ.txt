Algorithm used for Ordinary Queue:
Step 1 - IF (REAR == Size - 1) // Condition for Overflow.
Step 2 - IF ((FRONT == -1) and (REAR = -1)) // Inserting an element in an empty queue.
Step 3 - SET QUEUE [REAR] = element // Assign the inserted element to the queue.
Step 4 - END Enqueue.
Programming Code in Java:
class Queue
{
    private Node front;
    private Node rear;

    private static class Node
    {
        int data;
        Node next;

        Node(int data)
        {
            this.data = data;
            this.next = null;
        }
    }

    public Queue()
    {
        this.front = this.rear = null;
    }

    public void enqueue(int data)
    {
        Node newNode = new Node(data);

        if (rear == null)
        {
            front = rear = newNode;
            System.out.println("Enqueued: " + data);
            return;
        }

        rear.next = newNode;
        rear = newNode;
        System.out.println("Enqueued: " + data);
    }

    public int dequeue()
    {
        if (front == null)
        {
            System.out.println("Queue is empty");
            return -1;
        }

        int data = front.data;
        front = front.next;

        if(front==null)
        {
            rear = null;
        }

        System.out.println("Dequeued: " + data);
        return data;
    }

    public boolean isEmpty()
    {
        return front == null;
    }

    public void display()
    {
        if (front == null)
        {
            System.out.println("Queue is empty");
            return;
        }

        Node current = front;
        while (current != null)
        {
            System.out.println(current.data+" ");
            current = current.next;
        }

        System.out.println();
    }
}

class Main
{
    public static void main(String args[])
    {
        System.out.println("Sahil Vyas");
        System.out.println("MCA-61");
        Queue queue = new Queue();
        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.enqueue(40);
        queue.display();

        queue.dequeue();
        queue.display();

    }
}
