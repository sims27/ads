Algorithm used for Circular Queue:
Step 1:If Front = 1 And Rear = n Then
Print: "Queue is Full, Overflow Condition"
Exit
[End If]
Step 2: If Front = Rear + 1 Then
Print: "Queue is Full, Overflow Condition"
Exit
[End If] front
Step 3:If Rear Null Then
(Quene initially compty)
Set Front = 1 And Rear = 1
else If Rear = n Then
Set Rear = 1
Else
Set Rear = Rear + 1
[End If]
Step 4:Set Q[Rear] = Data
Step 5:Exit






Programming Code in Java:
class CircularQueue{
	
	private int[] queue;
	private int front;
	private int rear;
	private int capacity;
	private int size;
 
	public CircularQueue(int capacity){
		this.capacity=capacity;
		queue=new int[capacity];
		front=0;
		rear=-1;
		size=0;
	}
		
	public void enqueue(int value){
		if(isFull()){
			System.out.println("Queue is full. Cannot enqueue " + value);
			return;
		}
		rear=(rear + 1)%capacity;
		queue[rear]=value;
		size++;
		System.out.println("Enqueued: "+ value);
	}
	public int dequeue(){
		if(isEmpty()){
			System.out.println("Queue is Empty. Cannot dequeue");
			return -1;
		}
		int value=queue[front];
		front=(front + 1)%capacity;
		size --;
		System.out.println("Dequeued: " + value);
		return value;
	}
	
	public Boolean isEmpty(){
		return size==0;
	}
	
	public Boolean isFull(){
		return size==capacity;
	}
 
	public int getSize(){
		return size;
	}
 
	public void display(){
		if(isEmpty()){
			System.out.println("Queue is Empty.");
			return;
		}
		System.out.println("Queue Elements: ");
		for(int i=0;i<size;i++){
			System.out.print(queue[(front+i)%capacity]+" ");
		}
		System.out.println();
	}
 
	public static void main(String[] args){
		System.out.println("Name: Sahil Vyas");
		System.out.println("Roll No: MCA - 61");
		CircularQueue cq= new CircularQueue(5);
		cq.enqueue(10);
		cq.enqueue(20);
		cq.enqueue(30);
		cq.enqueue(40);
		cq.enqueue(50);
 
		cq.display();
 
		cq.dequeue();
		cq.dequeue();
		cq.display();
 
		cq.enqueue(60);
		cq.display();
	}
}
